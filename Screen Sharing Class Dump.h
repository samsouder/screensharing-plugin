/*
 *     Generated by class-dump 3.3.1 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2009 by Steve Nygard.
 */

#pragma mark Named Structures

struct CGAffineTransform {
    double a;
    double b;
    double c;
    double d;
    double tx;
    double ty;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct sockaddr_storage {
    unsigned char _field1;
    unsigned char _field2;
    char _field3[6];
    long long _field4;
    char _field5[112];
};

#pragma mark -

/*
 * File: /System/Library/CoreServices/Screen Sharing.app/Contents/MacOS/Screen Sharing
 * Arch: Intel x86-64 (x86_64)
 *
 *       Objective-C Garbage Collection: Unsupported
 */

@protocol ConnectionDataProvider <NSObject>
- (id)login;
- (id)password;
- (id)networkPort;
- (id)humanReadableIPAddress;
- (id)hostname;
- (id)IPv4NetworkAddressInHostByteOrder;
- (BOOL)showCursorForLegacy;
@end

@protocol NSNetServiceBrowserDelegate <NSObject>

@optional
- (void)netServiceBrowserWillSearch:(id)arg1;
- (void)netServiceBrowserDidStopSearch:(id)arg1;
- (void)netServiceBrowser:(id)arg1 didNotSearch:(id)arg2;
- (void)netServiceBrowser:(id)arg1 didFindDomain:(id)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(id)arg1 didFindService:(id)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(id)arg1 didRemoveDomain:(id)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(id)arg1 didRemoveService:(id)arg2 moreComing:(BOOL)arg3;
@end

@protocol NSNetServiceDelegate <NSObject>

@optional
- (void)netServiceWillPublish:(id)arg1;
- (void)netServiceDidPublish:(id)arg1;
- (void)netService:(id)arg1 didNotPublish:(id)arg2;
- (void)netServiceWillResolve:(id)arg1;
- (void)netServiceDidResolveAddress:(id)arg1;
- (void)netService:(id)arg1 didNotResolve:(id)arg2;
- (void)netServiceDidStop:(id)arg1;
- (void)netService:(id)arg1 didUpdateTXTRecordData:(id)arg2;
@end

@protocol NSObject
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (Class)superclass;
- (Class)class;
- (id)self;
- (struct _NSZone *)zone;
- (id)performSelector:(SEL)arg1;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (BOOL)isProxy;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)conformsToProtocol:(id)arg1;
- (BOOL)respondsToSelector:(SEL)arg1;
- (id)retain;
- (oneway void)release;
- (id)autorelease;
- (unsigned long long)retainCount;
- (id)description;
@end

@protocol NSWindowDelegate <NSObject>

@optional
- (BOOL)windowShouldClose:(id)arg1;
- (id)windowWillReturnFieldEditor:(id)arg1 toObject:(id)arg2;
- (struct CGSize)windowWillResize:(id)arg1 toSize:(struct CGSize)arg2;
- (struct CGRect)windowWillUseStandardFrame:(id)arg1 defaultFrame:(struct CGRect)arg2;
- (BOOL)windowShouldZoom:(id)arg1 toFrame:(struct CGRect)arg2;
- (id)windowWillReturnUndoManager:(id)arg1;
- (struct CGRect)window:(id)arg1 willPositionSheet:(id)arg2 usingRect:(struct CGRect)arg3;
- (BOOL)window:(id)arg1 shouldPopUpDocumentPathMenu:(id)arg2;
- (BOOL)window:(id)arg1 shouldDragDocumentWithEvent:(id)arg2 from:(struct CGPoint)arg3 withPasteboard:(id)arg4;
- (void)windowDidResize:(id)arg1;
- (void)windowDidExpose:(id)arg1;
- (void)windowWillMove:(id)arg1;
- (void)windowDidMove:(id)arg1;
- (void)windowDidBecomeKey:(id)arg1;
- (void)windowDidResignKey:(id)arg1;
- (void)windowDidBecomeMain:(id)arg1;
- (void)windowDidResignMain:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (void)windowWillMiniaturize:(id)arg1;
- (void)windowDidMiniaturize:(id)arg1;
- (void)windowDidDeminiaturize:(id)arg1;
- (void)windowDidUpdate:(id)arg1;
- (void)windowDidChangeScreen:(id)arg1;
- (void)windowDidChangeScreenProfile:(id)arg1;
- (void)windowWillBeginSheet:(id)arg1;
- (void)windowDidEndSheet:(id)arg1;
- (void)windowWillStartLiveResize:(id)arg1;
- (void)windowDidEndLiveResize:(id)arg1;
@end

@interface SSAppController : NSObject
{
    NSMenuItem *debugMenuItem;
    NSMatrix *mCryptoPrefRadio;
    NSMatrix *mPanPrefRadio;
    NSMatrix *mQualityPrefRadio;
    BOOL connectingState;
    BOOL mLaunchedViaURL;
}

+ (void)initialize;
- (void)application:(id)arg1 openFiles:(id)arg2;
- (void)applicationDidFinishLaunching:(id)arg1;
- (void)newConnection:(id)arg1;
- (void)awakeFromNib;
- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(id)arg1;
- (void)dealloc;
- (void)saveCryptoPref:(id)arg1;
- (void)saveImagingPref:(id)arg1;
- (void)saveScalingPref:(id)arg1;
- (void)showHelp:(id)arg1;
- (void)showBonjourBrowser:(id)arg1;
- (void)showAboutPanel:(id)arg1;
- (void)changeQuality:(id)arg1;
- (void)clearIconCache:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (void)scaleClicked:(id)arg1;
- (BOOL)isConnecting;
- (void)setIsConnecting:(BOOL)arg1;

@end

@interface SSEntryController : NSObject <ConnectionDataProvider, NSWindowDelegate>
{
    NSWindow *mWindow;
    NSButton *mConnectButton;
    NSTextField *mHost;
    NSPanel *mWaitPanel;
    NSProgressIndicator *mWaitPanelProgress;
    NSTextField *mWaitPanelText;
    id sessionToRestore;
    void *mRequestID;
    int connectStatus;
    NSString *resolvedName;
    NSString *resolvedDomain;
    NSString *resolvedTargetHostName;
    NSNumber *networkPort;
    NSLock *mAuthSessionLock;
    NSString *mLogin;
    NSString *mPassword;
    NSMutableDictionary *mCachedResolvedAddresses;
    NSMutableDictionary *mResolvedAddresses;
    NSString *mKerberosClientPrincipal;
    NSString *mKerberosServicePrincipal;
    BOOL mTryKerberosAuthentication;
    BOOL mClientPrincipalIsMarked;
    NSString *mDisplayName;
    NSString *mInitialAddress;
    BOOL mShowCursorForLegacy;
    NSString *mAuthErrorString;
    BOOL mGuestLogin;
    short mErrorState;
    NSDate *resolveStartTime;
    BOOL resolvedBTMM;
    BOOL mHasUserCancelledConnect;
    BOOL mHasConnected;
    BOOL mHasAuthenticated;
    BOOL isVNC;
    BOOL didResolve;
    BOOL preferHostname;
    BOOL didSetGuestError;
    BOOL detectedIPv6;
    BOOL shouldPreferIPv6;
}

+ (unsigned int)entryControllersCount;
+ (unsigned int)entryControllersCountTotalForSession;
+ (id)globalEntryController;
+ (void)entryControllerByResolvingURL:(id)arg1;
+ (void)entryControllerForHost:(id)arg1 port:(id)arg2 login:(id)arg3 password:(id)arg4 withIPv6:(BOOL)arg5;
- (void)connectionFailedAlertDidDismiss:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)updateEntryTracking;
- (void)setShouldConnectAsIPv6;
- (void)completeConnection;
- (BOOL)searchForSelf;
- (BOOL)isLocal;
- (BOOL)isLocal:(struct sockaddr_storage *)arg1;
- (void)cleanupProgress;
- (void)resolveURLForBonjour:(id)arg1;
- (id)init;
- (int)connectionState;
- (void)setConnectionState:(int)arg1;
- (void)awakeFromNib;
- (id)windowForAlert;
- (id)window;
- (void)textDidChange:(id)arg1;
- (void)setDidResolve:(BOOL)arg1;
- (id)didResolve;
- (void)setNetworkPort:(id)arg1;
- (void)setTargetHostName:(id)arg1;
- (id)targetHostName;
- (void)setWithNumberTryKerberosAuthentication:(id)arg1;
- (void)setTryKerberosAuthentication:(BOOL)arg1;
- (BOOL)tryKerberosAuthentication;
- (BOOL)isClientPrincipalMarked;
- (void)markClientPrincipal;
- (BOOL)preferHostnameForEndpoint;
- (BOOL)moreAddressesAvailable;
- (id)resolvedAddresses;
- (id)cachedResolvedAddresses;
- (void)updateToNextAddress;
- (void)connectAsVNC;
- (void)connect:(id)arg1;
- (void)runWaitPanel:(id)arg1;
- (BOOL)hasTerminatedConnect;
- (id)loginAllowingGuest:(char *)arg1 forConnection:(id)arg2 error:(int *)arg3;
- (void)connectionComplete;
- (void)windowWillClose:(id)arg1;
- (id)login;
- (void)setLogin:(id)arg1;
- (void)setPassword:(id)arg1;
- (void)setKerberosClientPrincipal:(id)arg1;
- (id)kerberosClientPrincipal;
- (void)setKerberosServicePrincipal:(id)arg1;
- (id)kerberosServicePrincipal;
- (BOOL)showCursorForLegacy;
- (void)setShowCursorForLegacy:(BOOL)arg1;
- (void)setErrorState:(short)arg1;
- (void)setResolvedAddresses:(id)arg1;
- (void)gatherCredentialsWithOptions:(id)arg1;
- (void)cancelAuthentication:(id)arg1;
- (id)password;
- (id)networkPort;
- (BOOL)successfullyResolvedBTMM;
- (void)setDidResolveBTMM:(BOOL)arg1;
- (id)resolveStartTime;
- (id)initialAddress;
- (void)setInitialAddress:(id)arg1;
- (id)humanReadableIPAddress;
- (void)setHostname:(id)arg1;
- (id)hostname;
- (id)IPv4NetworkAddressInHostByteOrder;
- (BOOL)usingIPv6;
- (id)name;
- (id)nameType;
- (void)setName:(id)arg1;
- (void)setGuestLogin:(BOOL)arg1;
- (id)uniqueIdentifier;
- (void)connectionFailed;
- (void)authenticationFailed;
- (void)authenticationSucceeded;
- (void)sessionDidTerminate;
- (void)dealloc;

@end

@interface SSURLHandler : NSScriptCommand
{
}

- (id)performDefaultImplementation;

@end

@interface ActivatingBorderlessWindow : RDNotifactionWindow
{
}

- (BOOL)canBecomeKeyWindow;
- (BOOL)canBecomeMainWindow;

@end

@interface TextLengthFormatter : NSFormatter
{
    int mMaxCharacters;
}

- (id)init;
- (id)initWithTextLength:(int)arg1;
- (void)setMaximumStringLength:(int)arg1;
- (id)stringForObjectValue:(id)arg1;
- (BOOL)getObjectValue:(id *)arg1 forString:(id)arg2 errorDescription:(id *)arg3;
- (id)attributedStringForObjectValue:(id)arg1 withDefaultAttributes:(id)arg2;
- (BOOL)isPartialStringValid:(id *)arg1 proposedSelectedRange:(struct _NSRange *)arg2 originalString:(id)arg3 originalSelectedRange:(struct _NSRange)arg4 errorDescription:(id *)arg5;

@end

@interface RDNotifactionWindow : NSWindow
{
    NSWindow *mNotificationOverlay;
    NSImageView *mImageView;
    NSImage *mImage;
}

- (id)initWithContentRect:(struct CGRect)arg1 styleMask:(unsigned long long)arg2 backing:(unsigned long long)arg3 defer:(BOOL)arg4;
- (id)initWithCoder:(id)arg1;
- (void)commonInit;
- (void)displayNotification:(id)arg1;
- (void)stopNotification:(id)arg1;
- (void)dealloc;

@end

@interface RFBScrollView : NSScrollView
{
    long long _leftTrackingTag;
    long long _rightTrackingTag;
    long long _topTrackingTag;
    long long _bottomTrackingTag;
    BOOL _leftPanActive;
    BOOL _rightPanActive;
    BOOL _topPanActive;
    BOOL _bottomPanActive;
    NSTimer *_panningTimer;
}

- (id)init;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithRFBScrollView:(id)arg1;
- (void)_commonInit;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)stopPanning;
- (void)startPanning;
- (void)panView;
- (void)setLeftTrackingTag:(long long)arg1;
- (void)setRightTrackingTag:(long long)arg1;
- (void)setTopTrackingTag:(long long)arg1;
- (void)setBottomTrackingTag:(long long)arg1;
- (long long)leftTrackingTag;
- (long long)rightTrackingTag;
- (long long)topTrackingTag;
- (long long)bottomTrackingTag;

@end

@interface SSRFBSessionController : RFBSessionController
{
    int mQualityMode;
    int displayCount;
    BOOL didConnect;
}

- (id)initWithComputer:(id)arg1 controlling:(BOOL)arg2 windowed:(BOOL)arg3 curtain:(BOOL)arg4;
- (void)awakeFromNib;
- (void)updateProxyIcon;
- (int)sessionQuality;
- (BOOL)isLegacy;
- (id)sessionPrefKeyForKey:(id)arg1;
- (id)toolbarDefaultItemIdentifiers:(id)arg1;
- (id)toolbarAllowedItemIdentifiers:(id)arg1;
- (id)toolbar:(id)arg1 itemForItemIdentifier:(id)arg2 willBeInsertedIntoToolbar:(BOOL)arg3;
- (id)displaysToolbarLocation;
- (void)scaleClicked:(id)arg1;
- (void)setQualityAdaptive:(id)arg1;
- (void)setQualityFull:(id)arg1;
- (BOOL)validateMenuItem:(id)arg1;
- (void)enterWindowed;
- (void)windowDidBecomeMain:(id)arg1;
- (void)addDisplayMenuItems;
- (void)displayInfoDidChangeForView:(id)arg1;
- (void)windowDidResignMain:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (void)selectDisplayFromMenu:(id)arg1;
- (void)connect;
- (void)focus;
- (void)setMenusForDisplays:(id)arg1;
- (void)removeDisplayMenuItems;
- (void)authenticationFailedForView:(id)arg1;
- (void)authenticationSucceededForView:(id)arg1;
- (BOOL)window:(id)arg1 shouldPopUpDocumentPathMenu:(id)arg2;
- (void)connectionFailedForView:(id)arg1 error:(int)arg2;
- (id)windowForAlert;
- (id)primaryWindow;
- (id)humanReadableIPAddress;
- (id)networkPort;
- (id)initialAddress;
- (void)dealloc;

@end

@interface SSApplication : NSApplication
{
    RFBImageView *mRDKeyEventHandler;
}

- (void)setKeyEventHandler:(id)arg1;
- (void)sendEvent:(id)arg1;

@end

@interface SSBJBrowser : NSObject <NSNetServiceDelegate, NSNetServiceBrowserDelegate>
{
    NSCollectionView *mGridView;
    NSTextField *mAddressField;
    NSButton *mAddCheckbox;
    NSNetServiceBrowser *mServiceBrowser;
    NSNetService *mPendingServiceConnection;
    NSMutableArray *mServices;
    NSMutableArray *mBonjourServices;
    NSMutableArray *mBaseServices;
    NSMutableDictionary *mSavedComputers;
    NSPredicate *mFilterPredicate;
    NSArray *mSortDescriptors;
}

+ (id)sharedBrowser;
- (id)init;
- (void)awakeFromNib;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)netServiceBrowser:(id)arg1 didFindService:(id)arg2 moreComing:(BOOL)arg3;
- (void)netServiceBrowser:(id)arg1 didRemoveService:(id)arg2 moreComing:(BOOL)arg3;
- (void)netServiceDidResolveAddress:(id)arg1;
- (void)sort:(id)arg1;
- (void)connectNetService:(id)arg1;
- (void)resolveNetService:(id)arg1;
- (void)connect:(id)arg1;
- (void)connectToHost:(id)arg1 named:(id)arg2;
- (void)saveConnectionForHost:(id)arg1 named:(id)arg2;
- (void)deleteService:(id)arg1;
- (void)controlTextDidChange:(id)arg1;
- (void)dealloc;

@end

@interface SSSelectionView : NSView
{
    SSLayoutItem *mLayoutItem;
    BOOL mHasSetDragData;
}

- (void)keyDown:(id)arg1;
- (BOOL)acceptsFirstResponder;
- (void)mouseDown:(id)arg1;
- (void)mouseDragged:(id)arg1;
- (unsigned long long)draggingSourceOperationMaskForLocal:(BOOL)arg1;
- (void)mouseUp:(id)arg1;
- (void)updateSelectionState;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface SSLayoutItem : NSCollectionViewItem
{
    NSColor *textColor;
    NSNumber *container;
}

- (id)init;
- (void)setView:(id)arg1;
- (void)setRepresentedObject:(id)arg1;
- (void)setSelected:(BOOL)arg1;

@end

@interface ShortcutSwitcher : NSObject
{
    NSMutableDictionary *keystrokeProfile;
}

+ (id)sharedInstance;
- (void)buildKeystrokeProfile;
- (void)configureKeystrokes:(BOOL)arg1;
- (void)performAction:(int)arg1 withMenu:(id)arg2;
- (void)dealloc;

@end

@interface SSDisplaysToolbarItem : NSToolbarItem
{
    long long lastPosition;
}

- (id)init;
- (void)validate;

@end

@interface FadeView : NSView
{
    NSTimer *animationTimer;
    float opacity;
    ReconnectProgressIndicator *spinner;
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)dealloc;
- (void)viewWillMoveToSuperview:(id)arg1;
- (void)viewDidBecomeOverlay;
- (void)viewWillResignOverlay:(BOOL)arg1;
- (void)addOverlayView;
- (void)animateFadeIn:(id)arg1;
- (void)animateFadeOut:(id)arg1;
- (void)updateFrameAndRedraw;
- (void)drawRect:(struct CGRect)arg1;

@end

@interface ReconnectProgressIndicator : NSView
{
    int iterator;
    NSTimer *animationTimer;
    struct CGPoint origin;
    struct CGPoint center;
    float scale;
    struct CGRect dirtyRect;
    struct CGRect pillRect;
    struct CGAffineTransform rotation12;
    struct CGColor *colors[12];
}

- (id)initWithFrame:(struct CGRect)arg1;
- (void)dealloc;
- (void)viewDidMoveToSuperview;
- (void)viewDidBecomeOverlay;
- (void)viewWillResignOverlay;
- (void)drawSpinner:(struct CGRect)arg1;
- (void)drawTextOverlay:(struct CGRect)arg1;
- (void)drawRect:(struct CGRect)arg1;
- (void)updateFrameAndRedraw;
- (void)stepAnimation:(id)arg1;

@end

@interface RFBSessionController : NSObject
{
    Computer *mComputer;
    float mCurrentScaling;
    RFBImageView *mRFBImageView;
    BOOL mShouldAutoAdjustQuality;
    BOOL mControlling;
    BOOL mWindowed;
    BOOL mShouldUseScaling;
    BOOL mCurtained;
    int mAutoAdjustMaxQualityLevel;
    struct CGRect mReconnectSubFrame;
    short mMenuBarHeight;
    int mCurrentDisplay;
    BOOL mReconnecting;
    BOOL mSwitchedDisplay;
    ActivatingBorderlessWindow *mFSWindow;
    NSMutableArray *mShieldWindows;
    NSPanel *mFSToolPalette;
    NSSlider *mFSQualitySlider;
    NSButton *mFSControlButton;
    NSButton *mFSCurtainButton;
    NSButton *mFSShareButton;
    NSButton *mFSCaptureButton;
    NSButton *mFSExitButton;
    NSButton *mFSFullScreenButton;
    NSButton *mFSShowButton;
    NSButton *mFSGetClipboardButton;
    NSButton *mFSSendClipboardButton;
    NSPopUpButton *mFSMultiDisplayPopUpButton;
    NSMutableDictionary *mToolbarItems;
    NSButton *mCaptureButton;
    NSView *mCaptureToolbarView;
    NSButton *mControlButton;
    NSView *mControlToolbarView;
    NSButton *mFullScreenButton;
    NSView *mFullScreenToolbarView;
    NSButton *mGetClipboardButton;
    NSView *mGetClipboardToolbarView;
    NSPopUpButton *mMultiDisplayPopUpButton;
    NSView *mMultiDisplayToolbarView;
    NSView *mFSMultiDisplayToolbarView;
    NSSlider *mQualitySlider;
    NSView *mQualityToolbarView;
    NSButton *mScaleButton;
    NSView *mScaleToolbarView;
    RFBScrollView *mScrollView;
    NSButton *mSendClipboardButton;
    NSView *mSendClipboardToolbarView;
    NSButton *mShareButton;
    NSView *mShareToolbarView;
    NSButton *mShowButton;
    NSView *mShowToolbarView;
    NSButton *mCurtainButton;
    NSView *mCurtainToolbarView;
    NSTextField *mCurtainTextField;
    NSPanel *mCurtainSheet;
    RDNotifactionWindow *mWindow;
    NSMenu *mQualityMenu;
    NSProgressIndicator *mReconnectProgress;
    NSButton *mReconnectStopButton;
    NSTextField *mReconnectSubText;
    NSTextField *mReconnectText;
    NSWindow *mReconnectWindow;
    NSTimer *mReconnectTimer;
    long long mPaletteTrackingTag;
    NSWindow *vncWarningDialog;
    NSTextField *vncWarningTitle;
    NSTextField *vncWarningSubtext;
    NSButton *suppressVNCWarningButton;
    NSButton *continueVNCWarningButton;
    NSButton *cancelVNCWarningButton;
    NSString *priorWindowFrame;
    BOOL usedPriorFrame;
    BOOL isLeopardOrLater;
    BOOL mShouldReconnect;
    BOOL sessionIsReconnecting;
    BOOL exitingFullscreen;
    NSImageView *mEncrytptionImageView;
    BOOL didGetCompleteFirstScreen;
    BOOL useDissolveTransition;
    RFBImageViewFacade *mRFBImageViewFacade;
    void *coreGraphicsLibraryHandle;
    struct CGSize mCurrentResolution;
    BOOL mShouldResizeForChange;
    BOOL mDidResetDisplays;
    int mConnectCount;
    BOOL mRequestForAbsolute;
    BOOL mSwitchedToBothDisplays;
    BOOL mShouldRedoScreen;
    BOOL mShouldRequestNow;
    BOOL mShouldHackSizeToFill;
    BOOL mShouldHackAgain;
    BOOL mSwitchedFromBoth;
    BOOL mDidRequestAgain;
    void *__CGSSetDisplayOptionV1;
    void *__CGSSetDisplayOptionV2;
}

+ (void)closeSessionForComputerAfterCancelling:(id)arg1;
+ (void)openSessionForComputer:(id)arg1 controlling:(BOOL)arg2;
+ (void)openSessionForComputer:(id)arg1 controlling:(BOOL)arg2 windowed:(BOOL)arg3 curtain:(BOOL)arg4;
+ (BOOL)isFullScreen;
+ (id)sessionForComputer:(id)arg1;
- (id)initWithComputer:(id)arg1 controlling:(BOOL)arg2 windowed:(BOOL)arg3 curtain:(BOOL)arg4;
- (void)connect;
- (BOOL)allowsPermissionRequests;
- (void)awakeFromNib;
- (void)animationComplete;
- (void)screenDrawProgressDidUpdateForView:(id)arg1;
- (void)addSheetDidEnd:(id)arg1;
- (BOOL)enterFullScreen;
- (void)willDisconnectForView:(id)arg1;
- (void)focus;
- (void)exitFullScreen;
- (void)controlClickedWrapper:(id)arg1;
- (void)controlClicked:(id)arg1;
- (BOOL)shouldUseScaling;
- (void)scaleClickedWrapper:(id)arg1;
- (void)scaleClicked:(id)arg1;
- (void)stopClicked:(id)arg1;
- (void)cleanupForCancel;
- (void)enterWindowed;
- (void)sizeToFillScreen;
- (void)shareClickedWrapper:(id)arg1;
- (void)shareClicked:(id)arg1;
- (void)displayChangedWrapper:(id)arg1;
- (void)multiDisplayClicked:(id)arg1;
- (void)showClicked:(id)arg1;
- (void)getClipboardClicked:(id)arg1;
- (void)requestClipboard;
- (void)sendClipboardClicked:(id)arg1;
- (void)sendClipboard;
- (void)showCurtainWindow;
- (void)curtainPromptConfirmed:(id)arg1;
- (void)curtainPromptCancelled:(id)arg1;
- (void)exitClicked:(id)arg1;
- (void)exit;
- (void)qualityChangedWrapper:(id)arg1;
- (void)qualityChanged:(id)arg1;
- (BOOL)isSheetRunning:(id)arg1;
- (void)forceNotice;
- (void)authenticationSucceededForView:(id)arg1;
- (void)vncAction:(id)arg1;
- (void)displayInfoDidChangeForView:(id)arg1;
- (void)visibilityDidChangeForView:(id)arg1;
- (void)resolutionDidChangeForView:(id)arg1;
- (void)communicationInterruptedForView:(id)arg1;
- (BOOL)someSizeMatchesUs;
- (void)viewDidChangeFrame:(id)arg1;
- (void)viewDidEndLiveResize:(id)arg1;
- (void)connectionFailedForView:(id)arg1 error:(int)arg2;
- (void)communicationInterruptedForViewTimer:(id)arg1;
- (void)connectionFailedForView:(id)arg1;
- (void)couldNotControlView:(id)arg1;
- (void)connectionFailedOpenAdminForView:(id)arg1;
- (void)authenticationFailedForView:(id)arg1;
- (void)connectionFailedSSHConfigurationErrorForView:(id)arg1;
- (void)connectionFailedSSHNotAvailableForView:(id)arg1;
- (id)windowForAlert;
- (void)commonRunAlertTitle:(id)arg1 message:(id)arg2;
- (void)userDeclinedToAskForView:(id)arg1;
- (void)fileTransmitRequestForView:(id)arg1 localFilePaths:(id)arg2 remoteFilePath:(id)arg3;
- (void)fileReceiveRequestForView:(id)arg1 remoteFilePaths:(id)arg2 localFilePath:(id)arg3;
- (id)containingWindow;
- (void)windowDidMiniaturize:(id)arg1;
- (void)windowDidDeminiaturize:(id)arg1;
- (void)windowDidResize:(id)arg1;
- (struct CGSize)windowWillResize:(id)arg1 toSize:(struct CGSize)arg2;
- (BOOL)windowShouldZoom:(id)arg1 toFrame:(struct CGRect)arg2;
- (id)sessionPrefKeyForKey:(id)arg1;
- (void)windowWillClose:(id)arg1;
- (void)windowDidBecomeKey:(id)arg1;
- (void)windowDidResignKey:(id)arg1;
- (void)authFailedSheetDidDismiss:(id)arg1 returnCode:(int)arg2 contextInfo:(void *)arg3;
- (void)mouseEntered:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)updatePanTrackingRects;
- (void)removeAllPanTrackingRects;
- (id)toolbarDefaultItemIdentifiers:(id)arg1;
- (id)toolbarAllowedItemIdentifiers:(id)arg1;
- (id)toolbar:(id)arg1 itemForItemIdentifier:(id)arg2 willBeInsertedIntoToolbar:(BOOL)arg3;
- (BOOL)validateMenuItem:(id)arg1;
- (void)releaseSelf;
- (void)dealloc;
- (BOOL)setARDQualityLevel:(int)arg1;

@end

@interface RFBImageViewFacade : NSImageView
{
    FadeView *fadeOverlay;
}

- (void)imageAutoscrolled;
- (void)startReconnectOverlay;
- (void)endReconnectOverlay:(BOOL)arg1;
- (BOOL)hasReconnectOverlay;

@end

@interface SSAppController (private)
- (void)windowDidBecomeMain:(id)arg1;
@end

@interface NSWindow (RDWindowAdditions)
- (void)setWindowFadeIn:(BOOL)arg1 fadeOut:(BOOL)arg2 duration:(double)arg3;
- (void)_setWindowFadeIn:(BOOL)arg1 fadeOut:(BOOL)arg2 duration:(double)arg3;
- (void)_cgsvalue_setWindowFadeIn:(BOOL)arg1 fadeOut:(BOOL)arg2 duration:(double)arg3;
@end

@interface NSNetService (SSNetServiceAdditions)
- (id)sortOrder;
- (id)visible;
@end

@interface RFBSessionController (PRIVATE)
- (void)sizeVNCDialogForComputerName;
- (void)configureToolbarButton:(id)arg1 asType:(unsigned long long)arg2 withImage:(id)arg3 needsAdjustment:(BOOL)arg4;
- (void)setToolbarButtonsEnabled:(BOOL)arg1;
- (void)beginReconnectProgressDialog;
- (void)finishAuthentication:(BOOL)arg1 isReconnecting:(BOOL)arg2;
- (void)setContentViewWantsLayer:(BOOL)arg1;
- (void)connectToEndpoint;
@end

